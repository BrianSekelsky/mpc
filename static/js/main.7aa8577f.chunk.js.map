{"version":3,"sources":["components/pad.jsx","components/pads.jsx","App.js","serviceWorker.js","index.js"],"names":["Pad","console","log","this","props","react_default","a","createElement","className","getClassName","data-key","dk","name","Audio","currentKey","Component","Pads","createTable","table","i","children","j","push","pad","key","pads","datakey","pressed","App","state","e","setState","keyCode","document","addEventListener","handleKeyPress","removeEventListener","bind","currentKeys","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAsCeA,0LA7Bb,OAFAC,QAAQC,IAAIC,KAAKC,OAGhBC,EAAAC,EAAAC,cAAA,OACCC,UAAWL,KAAKM,eAChBC,WAAUP,KAAKC,MAAMO,IAEpBR,KAAKC,MAAMQ,6CAOF,IAAIC,MAAM,0BAEtB,OAAGV,KAAKC,MAAMU,YAAcX,KAAKC,MAAMO,GAC/B,cAGA,wDAzBQI,cC0CHC,mLAtCb,OACCX,EAAAC,EAAAC,cAAA,aACCF,EAAAC,EAAAC,cAAA,aACEJ,KAAKc,sDAUN,IAHA,IAAIC,EAAQ,GAGHC,EAAI,EAAGA,EAAI,GAAIA,GAAI,EAAG,CAG7B,IAFA,IAAIC,EAAW,GAENC,EAAI,EAAGA,EAAI,EAAGA,IACrBD,EAASE,KAAKjB,EAAAC,EAAAC,cAAA,UACbF,EAAAC,EAAAC,cAACgB,EAAD,CACCC,IAAOrB,KAAKC,MAAMqB,KAAKN,EAAEE,GAAGG,IAC5BZ,KAAQT,KAAKC,MAAMqB,KAAKN,EAAEE,GAAGT,KAC7BD,GAAMR,KAAKC,MAAMqB,KAAKN,EAAEE,GAAGK,QAE3BC,QAAWxB,KAAKC,MAAMqB,KAAKN,EAAEE,GAAGM,QAEhCb,WAAcX,KAAKC,MAAMU,eAM7BI,EAAMI,KAAKjB,EAAAC,EAAAC,cAAA,UAAKa,IAElB,OAAOF,SApCOH,aC0DJa,6MAvDbC,MAAM,CAEFf,WAAY,GAEZW,KAAM,CACN,CAAED,IAAK,EAAGE,QAAS,GAAId,KAAM,KAC7B,CAAEY,IAAK,EAAGE,QAAS,GAAId,KAAM,KAC7B,CAAEY,IAAK,EAAGE,QAAS,GAAId,KAAM,KAC7B,CAAEY,IAAK,EAAGE,QAAS,GAAId,KAAM,KAC7B,CAAEY,IAAK,EAAGE,QAAS,GAAId,KAAM,KAC7B,CAAEY,IAAK,EAAGE,QAAS,GAAId,KAAM,KAC7B,CAAEY,IAAK,EAAGE,QAAS,GAAId,KAAM,KAC7B,CAAEY,IAAK,EAAGE,QAAS,GAAId,KAAM,KAC7B,CAAEY,IAAK,EAAGE,QAAS,GAAId,KAAM,KAC7B,CAAEY,IAAK,GAAIE,QAAS,GAAId,KAAM,KAC9B,CAAEY,IAAK,GAAIE,QAAS,GAAId,KAAM,KAC9B,CAAEY,IAAK,GAAIE,QAAS,GAAId,KAAM,KAC9B,CAAEY,IAAK,GAAIE,QAAS,GAAId,KAAM,KAC9B,CAAEY,IAAK,GAAIE,QAAS,GAAId,KAAM,KAC9B,CAAEY,IAAK,GAAIE,QAAS,GAAId,KAAM,KAC9B,CAAEY,IAAK,GAAIE,QAAS,GAAId,KAAM,qFAKnBkB,GACb3B,KAAK4B,SAAS,CAACjB,WAAYgB,EAAEE,sDAI7BC,SAASC,iBAAiB,UAAW/B,KAAKgC,+DAI1CF,SAASG,oBAAoB,UAAWjC,KAAKgC,iDAI7C,OACE9B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACdL,KAAKgC,eAAiBhC,KAAKgC,eAAeE,KAAKlC,MAC9CE,EAAAC,EAAAC,cAAA,iBAGAF,EAAAC,EAAAC,cAAA,UAAKJ,KAAK0B,MAAMS,aAChBjC,EAAAC,EAAAC,cAACkB,EAAD,CACEA,KAAMtB,KAAK0B,MAAMJ,KACjBX,WAAYX,KAAK0B,MAAMf,qBAjDfC,aCMEwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOxC,EAAAC,EAAAC,cAACuC,EAAD,MAASb,SAASc,eAAe,SDmH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.7aa8577f.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Pad extends Component {\n\n\n\n\trender(){\n\t\tconsole.log(this.props)\n\n\t\treturn(\n\t\t\t<div\n\t\t\t\tclassName={this.getClassName()}\n\t\t\t\tdata-key={this.props.dk}\n\t\t\t>\n\t\t\t\t{this.props.name}\n\t\t\t</div>\n\t\t);\n\t}\n\n\tgetClassName(){\n\n\t\tvar audio = new Audio('../samples/guitar1.mp3')\n\n\t\tif(this.props.currentKey == this.props.dk)\n\t\t\treturn \"pad playing\"\n\t\t\n\t\telse\n\t\t\treturn \"pad\"\n\n\t\taudio.play()\n\t}\n\n\tplayAudioSample(){\n\n\t}\n\n}\n\nexport default Pad;","import React, { Component } from 'react';\nimport Pad from './pad';\n\nclass Pads extends Component {\n\t\n\trender(){\n\t\treturn(\n\t\t\t<table>\n\t\t\t\t<tbody>\n\t\t\t\t\t{this.createTable()}\n\t\t\t\t</tbody>\n\t\t\t</table>\n\t\t);\n\t}\n\n\tcreateTable(){\n\t    let table = []\n\n\t    // Create 4 x 4 grid from array\n\t    for (let i = 0; i < 16; i=i+4) {\n\t      let children = []\n\t      //Inner loop to create children\n\t      for (let j = 0; j < 4; j++) {\n\t        children.push(<td>{\n\t        \t<Pad \n\t        \t\tkey = {this.props.pads[i+j].key}\n\t        \t\tname = {this.props.pads[i+j].name}\n\t        \t\tdk = {this.props.pads[i+j].datakey}\n\n\t        \t\tpressed = {this.props.pads[i+j].pressed}\n\n\t        \t\tcurrentKey = {this.props.currentKey}\n\t        \t\t\n\t        \t/>\n\t        }</td>)\n\t      }\n\t      //Create the parent and add the children\n\t      table.push(<tr>{children}</tr>)\n\t    }\n\t    return table\n  \t}\n\n}\n\nexport default Pads;","import React, { Component } from 'react';\nimport './App.css';\nimport Pads from './components/pads'\n\nclass App extends Component {\n\n  state={\n\n      currentKey: '',\n\n      pads: [\n      { key: 1, datakey: 49, name: '1' },\n      { key: 2, datakey: 50, name: '2' },\n      { key: 3, datakey: 51, name: '3' },\n      { key: 4, datakey: 52, name: '4' },\n      { key: 5, datakey: 81, name: 'Q' },\n      { key: 6, datakey: 87, name: 'W' },\n      { key: 7, datakey: 69, name: 'E' },\n      { key: 8, datakey: 82, name: 'R' },\n      { key: 9, datakey: 65, name: 'A' },\n      { key: 10, datakey: 83, name: 'S' },\n      { key: 11, datakey: 68, name: 'D' },\n      { key: 12, datakey: 70, name: 'F' },\n      { key: 13, datakey: 90, name: 'Z' },\n      { key: 14, datakey: 88, name: 'X' },\n      { key: 15, datakey: 67, name: 'C' },\n      { key: 16, datakey: 86, name: 'V' }\n\n    ]\n  }\n\n  handleKeyPress(e) {\n    this.setState({currentKey: e.keyCode})\n  }\n  \n  componentDidMount() {\n    document.addEventListener('keydown', this.handleKeyPress)\n  }\n  \n  componentWillUnmount() {\n    document.removeEventListener('keydown', this.handleKeyPress)\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n      {this.handleKeyPress = this.handleKeyPress.bind(this)}\n        <h1>\n          MPC \n        </h1>\n        <h2>{this.state.currentKeys}</h2>\n        <Pads \n          pads={this.state.pads}\n          currentKey={this.state.currentKey}\n        />\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}